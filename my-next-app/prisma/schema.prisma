// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  email            String          @unique
  firstName        String
  lastName         String
  age              Int
  gender           String
  pronounce        String
  password         String
  Image            String
  role             String? 
  visitedCountries VisitedCountry[] // Define the relation
  accounts         Account[]
  posts            Post []
  comments         Comment[]
  reports          Report[]
}

model VisitedCountry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  country    Country  @relation(fields: [countryId], references: [id])
  countryId  String
  rating     String      
}

model Country {
  id          String            @id @default(cuid())
  countryCode String
  countryName String
  visitedBy   VisitedCountry[]
}

model Account {
  id                    String  @id() @default(uuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refresh_token         String?
  refresh_token_expires_in Int?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id          Int       @id @default(autoincrement())
  userId      String    // Foreign key to User model
  userImage   String
  userName    String
  userAge     Int
  userPronouns String
  content     String
  date        DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id]) // Define the relation to User
  comments    Comment[] // One-to-many relationship with Comment model
  reports     Report[]  // One-to-many relationship with Report model
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String
  postId      Int       // Foreign key to Post model
  userId      String    // Foreign key to User model
  date        DateTime  @default(now())
  post        Post      @relation(fields: [postId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Report {
  id          Int       @id @default(autoincrement())
  reason      String
  postId      Int       // Foreign key to Post model
  userId      String    // Foreign key to User model
  date        DateTime  @default(now())
  post        Post      @relation(fields: [postId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}
